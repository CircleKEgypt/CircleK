@model CK.Models.SalesParameters;
@addTagHelper*, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!Doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="/css/datatables.min.css" />
    <link rel="stylesheet" type="text/css" href="/js/datatables.min.css" />
    <title>Circle K</title>
    <script src="/js/sweetalert2@11"></script>
    <script src="/css/sweetalert2@11.js"></script>
    <script>
        var preventBack = @Html.Raw(Json.Serialize(ViewData["PreventBack"] ?? false));

        if (preventBack) {
            window.history.pushState(null, "", location.href);
            window.onpopstate = function () {
                window.history.pushState(null, "", location.href);
            };
        }
    </script>
    <style>
        .main-footer {
           display:none;
        }
    </style>
</head>


<body class="hold-transition @* sidebar-mini layout-fixed *@">
    <div class="preloader">
        <div class="sk-spinner sk-spinner-wave">
            <div class="sk-rect1"></div>
            <div class="sk-rect2"></div>
            <div class="sk-rect3"></div>
            <div class="sk-rect4"></div>
            <div class="sk-rect5"></div>
        </div>
    </div>
    <div class="row" style="display: block; margin:0 1px">
        <div class="col-md-3">
            <div class="card card-primary collapsed-card" style="width:1500px" id="filterCard">
                <div class="card-header card-title" data-card-widget="collapse" style="color: #034C96;border:1px solid #0000004d;background-color:#0000000f">
                    <h3 class="card-title">Filtering</h3>
                    <div class="card-tools">
                    </div>
                </div>
                <div class="card-body" style="display:block; padding: 20px;transition:max-height 5s ease-in-out;">
                <form id="exportForm" asp-controller="Home" asp-action="Store" method="post">
                    <section class="content">
                        <div class="container-fluid">
                            <div class="row">
                                <section class="col-lg-7 ">

                                    <div class="row" style="display: block;">
                                        <div class="col-md-3">
                                        <ul>
                                            <li class="Displayliselect">
                                                <label>Date From:</label>
                                                <br>
                                                <input type="date" id="startDate" name="Parobj.startDate" class="form-control" style="width:200px;display:inline-block" required>
                                            </li>
                                            <li class="Displayliselect">
                                                <label>Date To:</label>
                                                <br>
                                                <input type="date" id="endDate" name="Parobj.endDate" class="form-control" style="width:200px;display:inline-block" required>
                                            </li>
                                        </ul>
                       
                                            <br>
                                        </div>
                                    </div>
                            </section>
                            <input type="hidden" id="actionValue" name="Parobj.actionValue">
                            <input type="hidden" id="CompareStart" value="@ViewBag.Start">
                            <input type="hidden" id="CompareEnd" value="@ViewBag.End">
                        </div>Elapsed Time :
                        <div id="stopwatch" style="display:inline-block">00:00:00</div><br />
                        <button type="submit" id="exportButton" class="btn btn-primary">Export To Excel</button>
                        <button type="submit" id="DisplayButton" class="btn btn-primary Display">Display Report</button>
                        </div>
                    </section>
                </form>
            <div id="salesReportTableWrapper" style="margin:1%">
                <script src="/js/sweetalert2@11"></script>
                @if (ViewBag.Data != null)
                {
                    <script>
                        Swal.fire({
                            title: "Good, You Display Report Successfully",
                            icon: "success",
                            timer: 5500
                        });
                    </script>
                    <ul>
                        <li class="Displayliselect" style="float: right;margin-right: 5%; text-align: center;">
                            <label>Total Sales</label>
                            <br>
                            <input type="button" class="form-control" style="font-weight:bold; width:200px;display:inline-block" value="@ViewBag.Total">
                        </li>
                        <li class="Displayliselect" style="float: right;margin-right: 5%; text-align: center;">
                            <label>Total Quantity</label>
                            <br>
                            <input type="button" class="form-control" style="font-weight:bold;width:200px;display:inline-block" value="@ViewBag.TotalQty">
                        </li>
                         <li class="Displayliselect" style="float: right;margin-right: 5%; text-align: center;">
                            <label>Total Transactions</label>
                            <br>
                            <input type="button" class="form-control" style="width:200px;display:inline-block" value="@ViewBag.Transactions">
                        </li> 
                    </ul>
                    <table id="example" class="table" style="width:93%;">
                        <thead>
                            <tr style="background-color: #a60f0f;color: #ffffffc7;">
                                <th>StoreName  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Department  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Quantity  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Total Sales <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < ViewBag.Data.Count; i++)
                            {
                                var dr = ViewBag.Data[i];
                                <tr>
                                    <td>@dr.StoreName</td>
                                    <td>@dr.DpName</td>
                                    <td>@dr.FQty</td>
                                    <td>@dr.FTotalSales</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
                </div>
            </div>
        </div>
    </div>
    <script src="/js/jquery-3.5.1.min.js"></script>
    <script src="/js/jquery.dataTables.min.js"></script>
    <script src="/js/dataTables.buttons.min.js"></script>
    <script src="/js/jszip.min.js"></script>
    <script src="/js/buttons.html5.min.js"></script>
    <script src="/js/pdfmake.min.js"></script>
    <script src="/js/vfs_fonts.js"></script>
   <script>
        var table = $('#example').DataTable({
            pageLength: 20,
            lengthChange: true,
            dom: 'Bfrtip', // This keeps the buttons in the DataTables control
            buttons: [
                {
                    extend: 'excelHtml5',
                    text: 'Export To Excel',
                    className: 'export-excel-button' // Add a class for easier selection later
                }
            ]
        });

        // After initializing the table, manually move the Excel export button to the top
        $('.export-excel-button').detach().prependTo($('#example_wrapper'));

        // Initialize the table again after moving the button
        table.buttons().container().appendTo('#example_wrapper');
</script>
<script>
        const savedDate = localStorage.getItem('endDate');
        const savedstartDate = localStorage.getItem('startDate');
        if (savedDate) {
            // Set the saved date as the value of the endDate input field
            document.getElementById('endDate').value = savedDate;
        } if (savedstartDate) {
            // Set the saved date as the value of the endDate input field
            document.getElementById('startDate').value = savedstartDate;
        }
    </script>
    <script>
        let startTime, elapsed = 0;
        let stopwatchDisplay = document.getElementById('stopwatch');
        let exportForm = document.getElementById('exportForm');
        let intervalId = null;
        function startStopwatch() {
            console.log('Starting stopwatch...');
            startTime = Date.now();
            intervalId = setInterval(() => {
                elapsed = Date.now() - startTime;
                stopwatchDisplay.textContent = formatElapsedTime(elapsed);
            }, 100);
            console.log('Stopwatch started with interval ID:', intervalId);
        }

        function stopStopwatch() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        }

        function formatElapsedTime(elapsed) {
            let hours = Math.floor(elapsed / 3600000);
            let minutes = Math.floor((elapsed % 3600000) / 60000);
            let seconds = ((elapsed % 60000) / 1000).toFixed(0);
            return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
        }

        function pad(number) {
            return number < 10 ? '0' + number : number;
        }

        function isYesterday(date) {
            var today = new Date();
            var yesterday = new Date(today);
            yesterday.setDate(today.getDate() - 1);
            return date.getDate() === yesterday.getDate() &&
                date.getMonth() === yesterday.getMonth() &&
                date.getFullYear() === yesterday.getFullYear() &&
                today.getHours() < 16; // 16 is the 4th hour of the day
            ;
        }
        // function checkDates1() {
        //     // Interpret an empty string as false and any non-empty string as true
        //     if (ch && ch.trim() !== "") {
        //         console.log(ch);
        //         alert("hi");
        //         return true;
        //     }
        //     return false;
        // }

        // if (checkDates1()) {
        //     // If either date is yesterday, do not continue with the rest of the code
        //     return;
        // }

        
            //      || (startDate.getDay() === 6 && dayOfWeek === 6)
            // || (endDate.getDay() === 5 && dayOfWeek === 5 && endDate=getDate()) || (endDate.getDay() === 6 && dayOfWeek === 6))
        // function logInputValue() {
        //     // Access the input field by its ID
        //     var inputField = document.getElementById('Comp');
        //     var startDateInput = document.getElementById('startDate');
        //     // Check if the input field exists
        //     if (inputField) {
        //         // Get the current value of the input field
        //         var inputValue = inputField.value;
        //         var startDateInput1 = startDateInput.value;
        //         var dateObject = new Date(inputValue);
        //         var year = dateObject.getFullYear();
        //         var month = dateObject.getMonth() + 1; // Months are zero-based in JavaScript
        //         var day = dateObject.getDate();

        //         // Pad the month and day with leading zeros if necessary
        //         month = month < 10 ? '0' + month : month;
        //         day = day < 10 ? '0' + day : day;

        //         // Concatenate the year, month, and day into a date string
        //         var dateString = year + '-' + month + '-' + day;
        //         // if (dateString === startDateInput1)
        //         //     alert("hi");
        //         // Log the value to the console
        //         console.log("Input value:", inputValue);
        //         console.log("Input value:", startDateInput1);
        //         console.log("Input value:", dateString);

        //         // Here you can also use the inputValue as needed
        //         // For example, setting it as part of another operation or display
        //     } else {
        //         console.error("Input field with ID 'Comp' not found.");
        //     }
        // }

        // Call the function to execute the logic
        //logInputValue();
        function checkDates() {
            var startDateInput = document.getElementById('startDate');
            var endDateInput = document.getElementById('endDate');
            var startDate = new Date(startDateInput.value);
            var endDate = new Date(endDateInput.value);
            var today = new Date();
            var dayOfWeek = today.getDay();
            console.log(startDate.getDate());
            console.log(endDate.getDate()); console.log(startDate.getMonth());
            var username = '@ViewBag.Username';
            var inputField = document.getElementById('CompareStart');
            var inputField2 = document.getElementById('CompareEnd');
            console.log(inputField);
            if (!startDateInput.value || !endDateInput.value) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "Please fill out both date fields.",
                    icon: "info",
                    timer: 4500
                });
                return true;
            }
            // Check if the input field exists
                // Get the current value of the input field
                var inputValue = inputField.value;
            var inputValue2 = inputField2.value;
            var dateObject = new Date(inputValue);
            var dateObject2 = new Date(inputValue2);
            var year = dateObject.getFullYear();
                var month = dateObject.getMonth() + 1; // Months are zero-based in JavaScript
                var day = dateObject.getDate();
            var year2 = dateObject2.getFullYear();
            var month2 = dateObject2.getMonth() + 1; // Months are zero-based in JavaScript
            var day2 = dateObject2.getDate();
                // Pad the month and day with leading zeros if necessary
                month = month < 10 ? '0' + month : month;
                day = day < 10 ? '0' + day : day;
            month2 = month2 < 10 ? '0' + month2 : month2;
            day2 = day2 < 10 ? '0' + day2 : day2;
                // Concatenate the year, month, and day into a date string
            var dateString = year + '-' + month + '-' + day;
            var dateString2 = year2 + '-' + month2 + '-' + day2;
            console.log("Input value:", dateString);
            console.log("Input value:", dateString2);
            if ((startDateInput.value <= dateString && endDateInput.value >= dateString2)
                || (startDateInput.value === dateString2 || endDateInput.value === dateString)
                || (startDateInput.value <= dateString && endDateInput.value >= dateString)
                || (startDateInput.value >= dateString && startDateInput.value <= dateString2)
            ) {
                Swal.fire({
                            title: "Dear ," + username,
                            text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                            icon: "info",
                            timer: 4500
                        });                   
                        return true;
            }
            // Log the value to the console
                console.log("Input value:", dateString);
            // if ((startDate.getDate() >= 10 || endDate.getDate() >= 10) && startDate.getMonth() === 6 && endDate.getMonth() === 6) {
            //     Swal.fire({
            //         title: "Dear ," + username,
            //         text: "لا يمكن إظهار مبيعات في أيام الاجازه سيتم فتحها يوم الأحد بعد الساعه ٤- ظهور المبيعات مغلق ",
            //         icon: "info",
            //         timer: 4500
            //     });
            //     return true;
            // } 
            //if ((startDate.getDate() >= 1 || endDate.getDate() >= 1) && startDate.getMonth() === 6 && endDate.getMonth() === 6) {
            //     alert('  لا يمكن إظهار مبيعات في أيام الاجازه ستفتح يوم الاثنين بعد الساعه ٤--- ظهور المبيعات مغلق ');
            //     return true;
            // }
            if ((endDate.getDate() === today.getDate() && endDate.getMonth() === today.getMonth() && endDate.getFullYear() === today.getFullYear()) || (startDate.getDate() === today.getDate() && startDate.getMonth() === today.getMonth() && startDate.getFullYear() === today.getFullYear())) {

                Swal.fire({
                    title:  "Dear ," + username,
                    text: "Export is not allowed if Date from or To is Today .",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            // Check if today is Friday and startDate is Friday and today's date is the same as startDate
            if (dayOfWeek === 4 && (endDate.getDay() === 4) &&
                (endDate.getDate() === today.getDate())) {
                Swal.fire({
                    title:  "Dear ," + username,
                    text: "Export is not allowed if today and Date From are on Thursday .",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 4 && (startDate.getDay() === 4) &&
                (startDate.getDate() === today.getDate())) {
                Swal.fire({
                    title:  "Dear ," + username,
                    text: "Export is not allowed if today and Date From are on Thursday .",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 5 && (startDate.getDay() === 5 || startDate.getDay() === 4) &&
                (startDate.getDate() === today.getDate() || startDate.getDate() === today.getDate() - 1 )) {
                Swal.fire({
                    title:  "Dear ," + username,
                    text: "Export is not allowed if today and Date From are on Friday .",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 5 && (endDate.getDay() === 5 || endDate.getDay() === 4) &&
                (endDate.getDate() === today.getDate() || endDate.getDate() === today.getDate() - 1)) {
                Swal.fire({
                    title:  "Dear ," + username,
                    text: "Export is not allowed if today and Date From are on Friday .",
                    icon: "info",
                    timer: 4500
                })
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 6 && (startDate.getDay() === 6 || startDate.getDay() === 5 || startDate.getDay() === 4) &&
                (startDate.getDate() === today.getDate() || startDate.getDate() === today.getDate() - 1 || startDate.getDate() === today.getDate() - 2)) {
                Swal.fire({
                    title:  "Dear ," + username,
                    text: "Export is not allowed if today and Date From are on Saturday or Friday.",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 6 && (endDate.getDay() === 6 || endDate.getDay() === 5 || endDate.getDay() === 4) &&
                (endDate.getDate() === today.getDate() || endDate.getDate() === today.getDate() - 1 || endDate.getDate() === today.getDate() - 2)) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "Export is not allowed if today and Date From are on Saturday or Friday.",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 0 && today.getHours() < 16 && (startDate.getDay() === 0 || startDate.getDay() === 5 || startDate.getDay() === 4 || startDate.getDay() === 7 || startDate.getDay() === 6) &&
                (startDate.getDate() === today.getDate() || startDate.getDate() === today.getDate() - 1 || startDate.getDate() === today.getDate() - 2 || startDate.getDate() === today.getDate() - 3
                    || startDate.getDate() === today.getDate() - 4)) {
                Swal.fire({
                    title:  "Dear ," + username,
                    text: "Export is not allowed if today and Date From are on Sunday or Saturday or Friday.",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
                    }
                if (dayOfWeek === 0 && today.getHours() < 16 && (endDate.getDay() === 0 || endDate.getDay() === 5 || endDate.getDay() === 4 || endDate.getDay() === 7 || endDate.getDay() === 6) &&
                    (endDate.getDate() === today.getDate() || endDate.getDate() === today.getDate() - 1 || endDate.getDate() === today.getDate() - 2 || endDate.getDate() === today.getDate() - 3
                        || endDate.getDate() === today.getDate() - 4)) {
                Swal.fire({
                    title:  "Dear ," + username,
                    text: "Export is not allowed if today and Date From are on Sunday or Saturday or Friday.",
                    icon: "info",
                    timer: 4500
                });
                    return true; // Return true to indicate that the export should not proceed
                }
            if (isYesterday(startDate) || isYesterday(endDate)) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "startDate or endDate is equal to yesterday and time before 4 o\'clock.",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true if either date is yesterday
            }
            return false; // Return false if neither date is yesterday
        }
        let DisplayButton = document.getElementById('DisplayButton');
        let exportButton = document.getElementById('exportButton');
        let actionInput = document.getElementById('actionValue'); // Reference to the hidden input
        DisplayButton.addEventListener('click', function (event) {
            event.preventDefault();
            if (checkDates()) {
                // If either date is yesterday, do not continue with the rest of the code
                return;
            }
            exportButton.disabled = true;
            DisplayButton.disabled = true;
            startStopwatch();
            actionInput.value = 1; // Set the value to 1 for Display action
            submitExportForm(); // Submit the export form
        });
        exportButton.addEventListener('click', function (event) {
            event.preventDefault();
            if (checkDates()) {
                // If either date is yesterday, do not continue with the rest of the code
                return;
            }
            exportButton.disabled = true;
            DisplayButton.disabled = true;
            startStopwatch();
            actionInput.value = 2; // Set the value to 1 for Display action
            submitExportForm(); // Submit the export form
        });
        // Event listener for the cancel export button
        // Assuming cancelExportButton is defined elsewhere in your script
        cancelExportButton.addEventListener('click', function (event) {
            event.preventDefault();
            cancelExport(); // Call the cancelExport function
        });

        // Function to handle export submission
        function submitExportForm() {
            var endDateValue = document.getElementById('endDate').value;
            var startDateValue = document.getElementById('startDate').value;

            // Save the endDate value to local storage
            localStorage.setItem('endDate', endDateValue);
            localStorage.setItem('startDate', startDateValue);

            // Clear the input field after saving
            document.getElementById('endDate').value = endDateValue;
            document.getElementById('startDate').value = startDateValue;
            exportForm.submit(); // Submit the export form
            checkExportStatus(); // Check export status immediately after submission

            // Set up an interval to check export status periodically
            checkStatusInterval = setInterval(checkExportStatus, 1000);
        }

        function checkExportStatus() {
            $.ajax({
                url: '/Home/CheckExportStatus',
                type: 'GET',
                success: function (status) {
                    console.log(status);
                    if (status === 'complete') {
                        stopStopwatch();
                        exportButton.disabled = false;
                        DisplayButton.disabled = false;
                        Swal.fire({
                            title: "You Export Report Successfully",
                            icon: "success",
                            timer: 5500
                        });
                    } else {
                        setTimeout(checkExportStatus, 1000);
                    }
                },
                error: function () {
                    exportButton.disabled = false;
                    DisplayButton.disabled = false;
                }
            });
        }
    </script>
</body>
</html>
